// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `Profile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __Profile_h__
#define __Profile_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace hat
{

class Profile;

}

}

namespace hat
{

class Profile;
bool operator==(const Profile&, const Profile&);
bool operator<(const Profile&, const Profile&);

}

namespace IceInternal
{

::Ice::Object* upCast(::hat::Profile*);
::IceProxy::Ice::Object* upCast(::IceProxy::hat::Profile*);

}

namespace hat
{

typedef ::IceInternal::Handle< ::hat::Profile> ProfilePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::hat::Profile> ProfilePrx;

void __read(::IceInternal::BasicStream*, ProfilePrx&);
void __patch__ProfilePtr(void*, ::Ice::ObjectPtr&);

}

namespace hat
{

struct FileStat
{
    ::Ice::Int id;
    ::std::string uri;
    ::std::string pathname;
    ::Ice::Long stamp;
    ::Ice::Long size;

    bool operator==(const FileStat& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(uri != __rhs.uri)
        {
            return false;
        }
        if(pathname != __rhs.pathname)
        {
            return false;
        }
        if(stamp != __rhs.stamp)
        {
            return false;
        }
        if(size != __rhs.size)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FileStat& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(uri < __rhs.uri)
        {
            return true;
        }
        else if(__rhs.uri < uri)
        {
            return false;
        }
        if(pathname < __rhs.pathname)
        {
            return true;
        }
        else if(__rhs.pathname < pathname)
        {
            return false;
        }
        if(stamp < __rhs.stamp)
        {
            return true;
        }
        else if(__rhs.stamp < stamp)
        {
            return false;
        }
        if(size < __rhs.size)
        {
            return true;
        }
        else if(__rhs.size < size)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FileStat& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FileStat& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FileStat& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FileStat& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::hat::FileStat> FileStatSeq;
void __writeFileStatSeq(::IceInternal::BasicStream*, const ::hat::FileStat*, const ::hat::FileStat*);
void __readFileStatSeq(::IceInternal::BasicStream*, FileStatSeq&);

struct ImageMeta
{
    ::Ice::Int id;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Long origin;

    bool operator==(const ImageMeta& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(height != __rhs.height)
        {
            return false;
        }
        if(origin != __rhs.origin)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ImageMeta& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(height < __rhs.height)
        {
            return true;
        }
        else if(__rhs.height < height)
        {
            return false;
        }
        if(origin < __rhs.origin)
        {
            return true;
        }
        else if(__rhs.origin < origin)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ImageMeta& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ImageMeta& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ImageMeta& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ImageMeta& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct ImageFeature
{
    ::Ice::Int id;
    ::std::string hist;

    bool operator==(const ImageFeature& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(hist != __rhs.hist)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ImageFeature& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(hist < __rhs.hist)
        {
            return true;
        }
        else if(__rhs.hist < hist)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ImageFeature& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ImageFeature& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ImageFeature& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ImageFeature& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace hat
{

class Callback_Profile_refreshPath_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Profile_refreshPath_Base> Callback_Profile_refreshPathPtr;

class Callback_Profile_updateFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Profile_updateFile_Base> Callback_Profile_updateFilePtr;

class Callback_Profile_updateMeta_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Profile_updateMeta_Base> Callback_Profile_updateMetaPtr;

class Callback_Profile_updateFeature_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Profile_updateFeature_Base> Callback_Profile_updateFeaturePtr;

}

namespace IceProxy
{

namespace hat
{

class Profile : virtual public ::IceProxy::Ice::Object
{
public:

    ::hat::FileStatSeq refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss)
    {
        return refreshPath(path, fss, 0);
    }
    ::hat::FileStatSeq refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss, const ::Ice::Context& __ctx)
    {
        return refreshPath(path, fss, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss)
    {
        return begin_refreshPath(path, fss, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss, const ::Ice::Context& __ctx)
    {
        return begin_refreshPath(path, fss, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPath(path, fss, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPath(path, fss, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss, const ::hat::Callback_Profile_refreshPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPath(path, fss, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string& path, const ::hat::FileStatSeq& fss, const ::Ice::Context& __ctx, const ::hat::Callback_Profile_refreshPathPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_refreshPath(path, fss, &__ctx, __del, __cookie);
    }

    ::hat::FileStatSeq end_refreshPath(const ::Ice::AsyncResultPtr&);
    
private:

    ::hat::FileStatSeq refreshPath(const ::std::string&, const ::hat::FileStatSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_refreshPath(const ::std::string&, const ::hat::FileStatSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateFile(const ::hat::FileStat& stat, const ::std::string& hash)
    {
        return updateFile(stat, hash, 0);
    }
    bool updateFile(const ::hat::FileStat& stat, const ::std::string& hash, const ::Ice::Context& __ctx)
    {
        return updateFile(stat, hash, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat& stat, const ::std::string& hash)
    {
        return begin_updateFile(stat, hash, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat& stat, const ::std::string& hash, const ::Ice::Context& __ctx)
    {
        return begin_updateFile(stat, hash, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat& stat, const ::std::string& hash, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFile(stat, hash, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat& stat, const ::std::string& hash, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFile(stat, hash, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat& stat, const ::std::string& hash, const ::hat::Callback_Profile_updateFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFile(stat, hash, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat& stat, const ::std::string& hash, const ::Ice::Context& __ctx, const ::hat::Callback_Profile_updateFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFile(stat, hash, &__ctx, __del, __cookie);
    }

    bool end_updateFile(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateFile(const ::hat::FileStat&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateFile(const ::hat::FileStat&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateMeta(const ::hat::ImageMeta& meta)
    {
        return updateMeta(meta, 0);
    }
    bool updateMeta(const ::hat::ImageMeta& meta, const ::Ice::Context& __ctx)
    {
        return updateMeta(meta, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta& meta)
    {
        return begin_updateMeta(meta, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta& meta, const ::Ice::Context& __ctx)
    {
        return begin_updateMeta(meta, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta& meta, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateMeta(meta, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta& meta, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateMeta(meta, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta& meta, const ::hat::Callback_Profile_updateMetaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateMeta(meta, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta& meta, const ::Ice::Context& __ctx, const ::hat::Callback_Profile_updateMetaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateMeta(meta, &__ctx, __del, __cookie);
    }

    bool end_updateMeta(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateMeta(const ::hat::ImageMeta&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateMeta(const ::hat::ImageMeta&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool updateFeature(const ::hat::ImageFeature& feature)
    {
        return updateFeature(feature, 0);
    }
    bool updateFeature(const ::hat::ImageFeature& feature, const ::Ice::Context& __ctx)
    {
        return updateFeature(feature, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature& feature)
    {
        return begin_updateFeature(feature, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature& feature, const ::Ice::Context& __ctx)
    {
        return begin_updateFeature(feature, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature& feature, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFeature(feature, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature& feature, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFeature(feature, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature& feature, const ::hat::Callback_Profile_updateFeaturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFeature(feature, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature& feature, const ::Ice::Context& __ctx, const ::hat::Callback_Profile_updateFeaturePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateFeature(feature, &__ctx, __del, __cookie);
    }

    bool end_updateFeature(const ::Ice::AsyncResultPtr&);
    
private:

    bool updateFeature(const ::hat::ImageFeature&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateFeature(const ::hat::ImageFeature&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Profile> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Profile> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Profile*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Profile*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace hat
{

class Profile : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::hat::FileStatSeq refreshPath(const ::std::string&, const ::hat::FileStatSeq&, const ::Ice::Context*) = 0;

    virtual bool updateFile(const ::hat::FileStat&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual bool updateMeta(const ::hat::ImageMeta&, const ::Ice::Context*) = 0;

    virtual bool updateFeature(const ::hat::ImageFeature&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace hat
{

class Profile : virtual public ::IceDelegate::hat::Profile,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::hat::FileStatSeq refreshPath(const ::std::string&, const ::hat::FileStatSeq&, const ::Ice::Context*);

    virtual bool updateFile(const ::hat::FileStat&, const ::std::string&, const ::Ice::Context*);

    virtual bool updateMeta(const ::hat::ImageMeta&, const ::Ice::Context*);

    virtual bool updateFeature(const ::hat::ImageFeature&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace hat
{

class Profile : virtual public ::IceDelegate::hat::Profile,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::hat::FileStatSeq refreshPath(const ::std::string&, const ::hat::FileStatSeq&, const ::Ice::Context*);

    virtual bool updateFile(const ::hat::FileStat&, const ::std::string&, const ::Ice::Context*);

    virtual bool updateMeta(const ::hat::ImageMeta&, const ::Ice::Context*);

    virtual bool updateFeature(const ::hat::ImageFeature&, const ::Ice::Context*);
};

}

}

namespace hat
{

class Profile : virtual public ::Ice::Object
{
public:

    typedef ProfilePrx ProxyType;
    typedef ProfilePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::hat::FileStatSeq refreshPath(const ::std::string&, const ::hat::FileStatSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___refreshPath(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateFile(const ::hat::FileStat&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateMeta(const ::hat::ImageMeta&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateMeta(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool updateFeature(const ::hat::ImageFeature&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateFeature(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Profile& l, const Profile& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Profile& l, const Profile& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace hat
{

template<class T>
class CallbackNC_Profile_refreshPath : public Callback_Profile_refreshPath_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::hat::FileStatSeq&);

    CallbackNC_Profile_refreshPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        ::hat::FileStatSeq __ret;
        try
        {
            __ret = __proxy->end_refreshPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Profile_refreshPathPtr
newCallback_Profile_refreshPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::hat::FileStatSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_refreshPath<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Profile_refreshPathPtr
newCallback_Profile_refreshPath(T* instance, void (T::*cb)(const ::hat::FileStatSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_refreshPath<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Profile_refreshPath : public Callback_Profile_refreshPath_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::hat::FileStatSeq&, const CT&);

    Callback_Profile_refreshPath(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        ::hat::FileStatSeq __ret;
        try
        {
            __ret = __proxy->end_refreshPath(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Profile_refreshPathPtr
newCallback_Profile_refreshPath(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::hat::FileStatSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_refreshPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Profile_refreshPathPtr
newCallback_Profile_refreshPath(T* instance, void (T::*cb)(const ::hat::FileStatSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_refreshPath<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Profile_updateFile : public Callback_Profile_updateFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Profile_updateFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Profile_updateFilePtr
newCallback_Profile_updateFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_updateFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Profile_updateFilePtr
newCallback_Profile_updateFile(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_updateFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Profile_updateFile : public Callback_Profile_updateFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Profile_updateFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateFile(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Profile_updateFilePtr
newCallback_Profile_updateFile(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_updateFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Profile_updateFilePtr
newCallback_Profile_updateFile(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_updateFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Profile_updateMeta : public Callback_Profile_updateMeta_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Profile_updateMeta(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateMeta(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Profile_updateMetaPtr
newCallback_Profile_updateMeta(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_updateMeta<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Profile_updateMetaPtr
newCallback_Profile_updateMeta(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_updateMeta<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Profile_updateMeta : public Callback_Profile_updateMeta_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Profile_updateMeta(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateMeta(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Profile_updateMetaPtr
newCallback_Profile_updateMeta(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_updateMeta<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Profile_updateMetaPtr
newCallback_Profile_updateMeta(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_updateMeta<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Profile_updateFeature : public Callback_Profile_updateFeature_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Profile_updateFeature(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateFeature(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Profile_updateFeaturePtr
newCallback_Profile_updateFeature(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_updateFeature<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Profile_updateFeaturePtr
newCallback_Profile_updateFeature(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Profile_updateFeature<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Profile_updateFeature : public Callback_Profile_updateFeature_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Profile_updateFeature(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::hat::ProfilePrx __proxy = ::hat::ProfilePrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_updateFeature(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Profile_updateFeaturePtr
newCallback_Profile_updateFeature(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_updateFeature<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Profile_updateFeaturePtr
newCallback_Profile_updateFeature(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Profile_updateFeature<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
